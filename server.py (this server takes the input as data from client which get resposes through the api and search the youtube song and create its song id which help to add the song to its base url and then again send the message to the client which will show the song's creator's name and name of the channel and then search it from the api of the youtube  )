import tkinter as tk
import socket
import threading
from googleapiclient.discovery import build
API_KEY = "AIzaSyCgrN8iVmyt_BRbbi76UD3IiYK9tCK_FC0"
YOUTUBE_API_SERVICE_NAME = "youtube"
YOUTUBE_API_VERSION = "v3"
BASE_URL = "https://youtube.com/watch?v="
root = tk.Tk()
root.title("YouTube Song Server")
root.geometry("600x300")
chat_box = tk.Text(root, state="disabled", wrap="word")
chat_box.pack(padx=10, pady=10, fill=tk.BOTH, expand=True)
entry1 = tk.Entry(root)
entry1.pack(padx=10, pady=10, fill=tk.X)
def log_message(msg):
    chat_box.config(state="normal")
    chat_box.insert(tk.END, msg + "\n")
    chat_box.config(state="disabled")
    chat_box.see(tk.END)
def search_song(query, max_results=5):
    youtube = build(YOUTUBE_API_SERVICE_NAME, YOUTUBE_API_VERSION, developerKey=API_KEY)
    request = youtube.search().list(
        q=query,
        part="snippet",
        type="video",
        maxResults=max_results
    )
    response = request.execute()
    results = []
    for item in response["items"]:
        song_id = item["id"]["videoId"]
        title = item["snippet"]["title"]
        url = BASE_URL + song_id
        results.append({"title": title, "url": url})
    return results
def handle_client(conn, addr):
    log_message(f"Connected with client: {addr}")
    while True:
        try:
            data = conn.recv(1024).decode().strip()
            if not data:
                break
            results = search_song(data)
            for res in results:
                message = f"{res['title']} -> {res['url']}"
                log_message(message)
                conn.sendall(message.encode())
        except Exception as e:
            log_message(f"Error: {e}")
            break
    conn.close()
def start_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("127.0.0.1", 5556))
    server.listen()
    log_message("Server started... Waiting for client.")
    while True:
        conn, addr = server.accept()
        threading.Thread(target=handle_client, args=(conn, addr), daemon=True).start()
def SendMessage(event=None):
    msg = entry1.get().strip()
    if msg:
        log_message(f"You (server): {msg}")
        entry1.delete(0, tk.END)
entry1.bind("<Return>", SendMessage)
threading.Thread(target=start_server, daemon=True).start()

root.mainloop()
